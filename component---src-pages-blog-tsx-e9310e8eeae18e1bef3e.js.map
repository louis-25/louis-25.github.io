{"version":3,"file":"component---src-pages-blog-tsx-e9310e8eeae18e1bef3e.js","mappings":"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","sources":["webpack://louis-25/./node_modules/classnames/index.js","webpack://louis-25/./src/components/Blog/PostItem.tsx","webpack://louis-25/./src/components/Blog/Pagination/Pagination.tsx","webpack://louis-25/./src/components/Blog/PostList.tsx","webpack://louis-25/./src/pages/blog.tsx"],"sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString === Object.prototype.toString) {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        } else {\n          classes.push(arg.toString());\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\n\r\ntype PostItemProps = PostFrontmatterType & { link: string }\r\n\r\nconst PostItemWrapper = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\r\n  cursor: pointer;\r\n  transition: 0.15s all ease-in;\r\n\r\n  &:hover {\r\n    transform: translateY(-8px);\r\n    box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.3);\r\n    // box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  }\r\n`\r\nconst ImgBox = styled.div`\r\n  height: 270px;\r\n  display: flex;\r\n  align-items: center;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ThumbnailImage = styled(GatsbyImage)`\r\n  width: 100%;\r\n  max-height: 300px;\r\n  align-items: center;\r\n  flex: 8;\r\n`\r\nconst PostItemContent = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 15px;\r\n`\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-bottom: 3px;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst Date = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  opacity: 0.7;\r\n`\r\n\r\nconst Category = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 10px;\r\n  margin: 10px -5px;\r\n`\r\n\r\nconst CategoryItem = styled.div`\r\n  margin: 2.5px 5px;\r\n  padding: 3px 5px;\r\n  border-radius: 3px;\r\n  background: black;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: white;\r\n`\r\n\r\nconst Summary = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 16px;\r\n  opacity: 0.8;\r\n`\r\nconst PostItem: FunctionComponent<PostItemProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  summary,\r\n  thumbnail: {\r\n    childImageSharp: { gatsbyImageData },\r\n  },\r\n  link,\r\n}) {\r\n  return (\r\n    <PostItemWrapper to={link}>\r\n      <ImgBox>\r\n        <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\r\n      </ImgBox>\r\n\r\n      <PostItemContent>\r\n        <Title>{title}</Title>\r\n        <Date>{date}</Date>\r\n        <Category>\r\n          {categories.map(category => (\r\n            <CategoryItem key={category}>{category}</CategoryItem>\r\n          ))}\r\n        </Category>\r\n        <Summary>{summary}</Summary>\r\n      </PostItemContent>\r\n    </PostItemWrapper>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport classNames from 'classnames'\r\nimport './Pagination.scss'\r\n\r\ntype PagenationProps = {\r\n  postPerPage: number // 한 페이지에 보이는 post\r\n  totalPosts: number // 총 post수\r\n  currentPage: number // 현재 페이지\r\n  paginate: Function\r\n}\r\n\r\nconst Pagination: FunctionComponent<PagenationProps> = ({\r\n  postPerPage,\r\n  totalPosts,\r\n  currentPage,\r\n  paginate,\r\n}) => {\r\n  const pageNumbers = [] // 총 page수\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postPerPage); i++) {\r\n    pageNumbers.push(i)\r\n  }\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumbers.map(num => (\r\n          <li\r\n            key={num}\r\n            className={classNames('pagination_item', {\r\n              pagination_currPage: currentPage === num,\r\n            })}\r\n            onClick={() => {\r\n              paginate(num)\r\n              window.scrollTo(0, 0)\r\n            }}\r\n          >\r\n            {num}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import React, { FunctionComponent, useMemo, useState } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostItem from './PostItem'\r\nimport Pagination from './Pagination/Pagination'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\n//post에서 사용되는 데이터로 index페이지에서도 형식을 맞춰주기 위해 export로 작성\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\nconst PostListWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  grid-auto-rows: 400px;\r\n  grid-gap: 20px;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 50px 0 100px;\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    padding: 50px 20px;\r\n  }\r\n`\r\n\r\nconst PostList: FunctionComponent<PostListProps> = function ({\r\n  selectedCategory,\r\n  posts,\r\n}) {\r\n  //카테고리별 post데이터 추출\r\n  const postListData = useMemo(\r\n    () =>\r\n      posts.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { categories },\r\n          },\r\n        }: PostListItemType) =>\r\n          selectedCategory !== 'All'\r\n            ? categories.includes(selectedCategory)\r\n            : true,\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  const [currentPage, setCurrentPage] = useState(1) // 현재 페이지\r\n  const [postPerPage] = useState(6) //페이지당 포스트 개수\r\n\r\n  //현재 페이지 가져오기\r\n  const indexOfLastPost: number = currentPage * postPerPage // 1*10 = 10번 포스트\r\n  const indexOfFirstPost: number = indexOfLastPost - postPerPage //10 - 10 = 0번 포스트\r\n  const currentPosts = postListData.slice(indexOfFirstPost, indexOfLastPost) //0~10번까지 포스트\r\n\r\n  const paginate = (pageNum: number) => setCurrentPage(pageNum)\r\n  return (\r\n    <>\r\n      <PostListWrapper>\r\n        {currentPosts.map(\r\n          ({\r\n            node: {\r\n              id,\r\n              fields: { slug },\r\n              frontmatter,\r\n            },\r\n          }: PostListItemType) => (\r\n            <PostItem {...frontmatter} link={slug} key={id} />\r\n          ),\r\n        )}\r\n      </PostListWrapper>\r\n      <Pagination\r\n        postPerPage={postPerPage}\r\n        totalPosts={postListData.length}\r\n        currentPage={currentPage}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","import Template from 'components/Common/Template'\r\nimport PostList from 'components/Blog/PostList'\r\nimport React, { FunctionComponent } from 'react'\r\nimport queryString, { ParsedQuery } from 'query-string'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport { graphql } from 'gatsby'\r\nimport Header from 'components/Common/Header'\r\nimport styled from '@emotion/styled'\r\nimport ProfileSection from 'components/Common/ProfileSection'\r\n\r\ntype BlogPageProps = {\r\n  location: {\r\n    search: string\r\n  }\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n  }\r\n}\r\n\r\nconst blog: FunctionComponent<BlogPageProps> = ({\r\n  location: { search },\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n}) => {\r\n  // URL쿼리 파싱\r\n  const parsed: ParsedQuery<string> = queryString.parse(search)\r\n  const selectedCategory: string =\r\n    typeof parsed.category !== 'string' || !parsed.category //category값 가져오기\r\n      ? 'All'\r\n      : parsed.category\r\n\r\n  const InnerBox = styled.div`\r\n    width: 768px;\r\n    margin: auto;\r\n    @media (max-width: 768px) {\r\n      width: 100%;\r\n    }\r\n  `\r\n\r\n  return (\r\n    <Template title=\"Louis's Blog\" description=\"개발용 블로그입니다\">\r\n      <InnerBox>\r\n        <Header></Header>\r\n        <ProfileSection></ProfileSection>\r\n        <PostList selectedCategory={selectedCategory} posts={edges} />\r\n      </InnerBox>\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default blog\r\n\r\nexport const getPostList = graphql`\r\n  query getPostList {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","PostItemWrapper","Link","process","ImgBox","ThumbnailImage","GatsbyImage","PostItemContent","Title","Date","Category","CategoryItem","Summary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","React","to","image","alt","map","category","postPerPage","totalPosts","currentPage","paginate","pageNumbers","Math","ceil","className","num","pagination_currPage","onClick","window","scrollTo","PostListWrapper","selectedCategory","posts","postListData","useMemo","filter","node","frontmatter","includes","useState","setCurrentPage","indexOfLastPost","indexOfFirstPost","currentPosts","slice","id","slug","fields","PostItem","Pagination","pageNum","search","location","edges","data","allMarkdownRemark","parsed","queryString","InnerBox","Template","description","Header","ProfileSection","PostList"],"sourceRoot":""}